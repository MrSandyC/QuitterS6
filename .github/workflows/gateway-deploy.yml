name: Gateway CI CD

on:
  push:
    paths:
      - 'src/gateway/**'
    branches: 
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: './src/gateway'

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./src/gateway/package-lock.json
    - name: Run CI
      working-directory: ./src/gateway
      run: npm ci
    - name: Run build
      working-directory: ./src/gateway
      run: npm run build --if-present
    
      
  test:
    needs: [build]
    name: Test stage
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: './src/gateway'
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./src/gateway/package-lock.json
    - name: Run CI
      working-directory: ./src/gateway
      run: npm ci
    # - name: Run test
    #   working-directory: ./src/gateway
    #   run: npm test

  deployment:
    needs: [build, test]
    name: Docker push stage
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: './src/gateway'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: mrsandyc/quitter-gateway
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./src/gateway
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  azure-deploy:
    needs: [build, test, build-docker]
    name: Azure deployment
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@main
    # Connecting to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Building docker image and pushing to ACR
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
      working-directory: ./src/gateway
    
    # Set target AKS cluster
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
    # Create image pull secret for ACR
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          ${{ github.workspace }}/k8s/gateway/deployment.yaml
          ${{ github.workspace }}/k8s/gateway/service.yaml
          ${{ github.workspace }}/k8s/gateway/ingress.yaml
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}